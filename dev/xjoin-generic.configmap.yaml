apiVersion: v1
data:
  kafka.bootstrap.url: kafka-kafka-bootstrap.test.svc:9092
  debezium.connector.template: >
    {
      "tasks.max": "{{.DebeziumTasksMax}}",
      "database.hostname": "{{.DatabaseHostname}}",
      "database.port": "{{.DatabasePort}}",
      "database.user": "{{.DatabaseUsername}}",
      "database.password": "{{.DatabasePassword}}",
      "database.dbname": "{{.DatabaseName}}",
      "database.server.name": "{{.DatabaseServerName}}",
      "database.sslmode": "{{.DatabaseSSLMode}}",
      "database.sslrootcert": "{{.DatabaseSSLRootCert}}",
      "table.whitelist": "{{.DatabaseTable}}",
      "plugin.name": "pgoutput",
      "transforms": "unwrap, reroute",
      "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
      "transforms.unwrap.delete.handling.mode": "rewrite",
      "errors.log.enable": {{.DebeziumErrorsLogEnable}},
      "errors.log.include.messages": true,
      "slot.name": "{{.ReplicationSlotName}}",
      "max.queue.size": {{.DebeziumQueueSize}},
      "max.batch.size": {{.DebeziumMaxBatchSize}},
      "poll.interval.ms": {{.DebeziumPollIntervalMS}},
      "key.converter": "io.apicurio.registry.utils.converter.AvroConverter",
      "key.converter.apicurio.registry.url": "{{.SchemaRegistryProtocol}}://{{.SchemaRegistryHost}}:{{.SchemaRegistryPort}}/apis/registry/v2",
      "key.converter.apicurio.registry.auto-register": "true",
      "value.converter": "io.apicurio.registry.utils.converter.AvroConverter",
      "value.converter.apicurio.registry.url": "{{.SchemaRegistryProtocol}}://{{.SchemaRegistryHost}}:{{.SchemaRegistryPort}}/apis/registry/v2",
      "value.converter.apicurio.registry.auto-register": "false",
      "value.converter.apicurio.registry.find-latest": "true",
      "value.converter.enhanced.avro.schema.support": "true",
      "transforms.reroute.type": "io.debezium.transforms.ByLogicalTableRouter",
      "transforms.reroute.topic.regex": ".*",
      "transforms.reroute.topic.replacement": "{{.TopicName}}"
    }
  elasticsearch.connector.template: >
    {
      "tasks.max": "{{.ElasticSearchTasksMax}}",
      "topics": "{{.Topic}}",
      "key.ignore": "false",
      "connection.url": "{{.ElasticSearchURL}}",
      {{if .ElasticSearchUsername}}"connection.username": "{{.ElasticSearchUsername}}",{{end}}
      {{if .ElasticSearchPassword}}"connection.password": "{{.ElasticSearchPassword}}",{{end}}
      "type.name": "_doc",
      "transforms.deleteIf.type": "com.redhat.insights.deleteifsmt.DeleteIf$Value",
      "transforms.deleteIf.field": "__deleted",
      "transforms.deleteIf.value": "true",
      "behavior.on.null.values":"delete",
      "behavior.on.malformed.documents": "warn",
      "auto.create.indices.at.start": false,
      "schema.ignore": true,
      "max.in.flight.requests": {{.ElasticSearchMaxInFlightRequests}},
      "errors.log.enable": {{.ElasticSearchErrorsLogEnable}},
      "errors.log.include.messages": true,
      "max.retries": {{.ElasticSearchMaxRetries}},
      "retry.backoff.ms": {{.ElasticSearchRetryBackoffMS}},
      "batch.size": {{.ElasticSearchBatchSize}},
      "max.buffered.records": {{.ElasticSearchMaxBufferedRecords}},
      "linger.ms": {{.ElasticSearchLingerMS}},
      "key.converter": "org.apache.kafka.connect.storage.StringConverter",
      "value.converter": "io.apicurio.registry.utils.converter.AvroConverter",
      "value.converter.apicurio.registry.auto-register": "false",
      "value.converter.apicurio.registry.find-latest": "true",
      "value.converter.apicurio.registry.url": "{{.SchemaRegistryProtocol}}://{{.SchemaRegistryHost}}:{{.SchemaRegistryPort}}/apis/registry/v2",
      "value.converter.enhanced.avro.schema.support": "true"
    }
  elasticsearch.index.template: >
    {
      "settings": {
          "index": {
              "number_of_shards": "{{.ElasticSearchIndexShards}}",
              "number_of_replicas": "{{.ElasticSearchIndexReplicas}}",
              "max_result_window": 100000,
              "default_pipeline": "{{.ElasticSearchPipeline}}"
          },
          "analysis": {
              "normalizer": {
                  "case_insensitive": {
                      "filter": "lowercase"
                  }
              }
          }
      },
      "mappings": {
          "dynamic": "false",
          "properties": {{.ElasticSearchProperties}}
      }
    }
kind: ConfigMap
metadata:
  name: xjoin-generic
